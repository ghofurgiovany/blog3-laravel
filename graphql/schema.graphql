type Query {
    post(slug: String! @eq): Post @find
    posts(where: WhereConstraints): [Post] @paginate(defaultCount: 20)
    author(slug: String! @eq): Author! @find
    category(slug: String! @eq): Category! @find
    tags: [Tag] @paginate(defaultCount: 5)
    tag(slug: String! @eq): Tag @find

    categories: [Category] @paginate(defaultCount: 5)
    popularPosts: [Post] @paginate(defaultCount: 5, scopes: ["popular"])
}

input WhereConstraints {
    column: String
    operator: String
    value: String
    AND: [WhereConstraints!]
    OR: [WhereConstraints!]
    NOT: [WhereConstraints!]
}

type Author {
    slug: String!
    name: String!
    avatar: Image!
    posts: [Post]! @paginate(defaultCount: 10)
}

type Post {
    id: ID!
    slug: String!
    title: String!
    description: String!
    keywords: [String]!
    content: String!
    paragraph: [String]!
    views: Int
    shares: Int
    images: [Image!]!
    thumbnail: Image
    categories: [Category]!
    tags: [Tag]! @paginate(defaultCount: 5)
    author: Author!
    created_at: String!
    updated_at: String!
    related: [Post] @field(resolver: "App\\GraphQL\\Queries\\PostQuery@related")
}

type Image {
    url: String
    altText: String
}

type Category {
    slug: String!
    name: String!
    posts: [Post]! @paginate(defaultCount: 10)
}

type Tag {
    slug: String!
    name: String!
    posts: [Post]! @paginate(defaultCount: 10)
}
